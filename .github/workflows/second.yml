name: Manual workflow 2

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.
on:
  workflow_dispatch:

env:
  PROPS_TXT: PropsMultiTests.txt
  RES_XML: ResultsMultiTests.xml
  LAUNCHER_EXE: FTToolsLauncher.exe
  LAUNCHER_URL: https://github.com/MicroFocus/ADM-FT-ToolsLauncher/releases/download/v1.0-beta-rev12/FTToolsLauncher_net48.exe
defaults:
  run:
    shell: pwsh
    working-directory: ..\

jobs:
#  dump_contexts_to_log:
#    runs-on: self-hosted
#    steps:
#      - name: Dump GitHub context
#        id: github_context_step
#        run: echo '${{ toJSON(github) }}'
#      - name: Dump job context
#        run: echo '${{ toJSON(job) }}'
#      - name: Dump steps context
#        run: echo '${{ toJSON(steps) }}'
#      - name: Dump runner context
#        run: echo '${{ toJSON(runner) }}'
#      - name: Dump strategy context
#        run: echo '${{ toJSON(strategy) }}'
#      - name: Dump matrix context
#        run: echo '${{ toJSON(matrix) }}'

  getUftOneTests:
    runs-on: self-hosted
#    needs: dump_contexts_to_log
    steps:
    - name: Display the working folder GITHUB_WORKSPACE
      run: echo "$env:GITHUB_WORKSPACE"
    - name: Display the working folder RUNNER_WORKSPACE
      run: echo "$env:RUNNER_WORKSPACE"
    - name: Checkout current repo
      uses: actions/checkout@v3
      with:
        ref: ${{github.ref_name}}
        clean: false

  createPropsFile:
    runs-on: self-hosted
    needs: getUftOneTests
    steps:
    - name: Create properties file
      run: |
        @"
        runType=FileSystem
        Test1=$($pwd.Path.Replace('\', '\\'))
        resultsFilename=$env:RES_XML
        "@ > $env:PROPS_TXT
    - name: Check properies file
      run: TEST-PATH $env:PROPS_TXT

  getFTToolsLauncher:
    runs-on: self-hosted
    needs: getUftOneTests
    steps:
    - name: GET FTToolsLauncher.exe
      run:  if (TEST-PATH $env:LAUNCHER_EXE) {
              Write-Host 'FTToolsLauncher.exe already exists' 
            } else {
              curl -L -o $env:LAUNCHER_EXE $env:LAUNCHER_URL
            }
#    - name: Get FTToolsLauncher.exe
#      if: ${{ failure() }}
#      run: curl -L -o $env:LAUNCHER_EXE $env:LAUNCHER_URL
  checkFTToolsLauncher:
    runs-on: self-hosted
    needs: getFTToolsLauncher
    steps:
    - name: CHECK FTToolsLauncher.exe
      run:  if (TEST-PATH $env:LAUNCHER_EXE) {
              Write-Host 'FTToolsLauncher.exe is available' 
            } else {
              Write-Error 'FTToolsLauncher.exe not found' 
            }
    - run: exit -1
